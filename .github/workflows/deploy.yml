name: Deploy Frontend to Hostinger

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug and verify FTP credentials
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          echo "=== DEBUGGING FTP CONNECTION ==="
          echo "Server: $FTP_SERVER"
          echo "Username: $FTP_USERNAME"
          echo "Password length: $(echo -n "$FTP_PASSWORD" | wc -c) characters"
          echo "Password first 3 chars: $(echo -n "$FTP_PASSWORD" | cut -c1-3)..."
          echo "Password SHA256: $(echo -n "$FTP_PASSWORD" | sha256sum | cut -d' ' -f1)"
          echo "Username HEX: $(echo -n "$FTP_USERNAME" | xxd -p)"
          echo "Password HEX (first 6 chars): $(echo -n "$FTP_PASSWORD" | cut -c1-6 | xxd -p)"

          # Install tools
          sudo apt-get update -qq && sudo apt-get install -y --no-install-recommends lftp curl

          echo "=== TESTING WITH CURL ==="
          echo "Testing basic FTP with curl..."
          if curl -v --disable-epsv --connect-timeout 30 \
            ftp://$FTP_SERVER -u "$FTP_USERNAME:$FTP_PASSWORD" \
            --ftp-method nocwd -Q "PWD" 2>&1 | tee curl_output.log; then
            echo "‚úÖ CURL FTP test had some response"
          else
            echo "‚ùå CURL FTP test failed completely"
          fi

          echo "=== TESTING WITH LFTP (Plain FTP) ==="
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" -e "set ftp:ssl-allow no; set debug 3; pwd; bye" "$FTP_SERVER" 2>&1 || true

          echo "=== TESTING WITH LFTP (FTPS) ==="  
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" -e "set ftp:ssl-force yes; set ftp:ssl-protect-data yes; set ssl:verify-certificate no; set debug 3; pwd; bye" "$FTP_SERVER" 2>&1 || true

          echo "=== TESTING ALTERNATIVE HOSTINGER SERVERS ==="
          # Try common Hostinger FTP servers
          for server in "files.000webhost.com" "ftp.reformix.site"; do
            echo "Testing server: $server"
            if timeout 20 lftp -u "$FTP_USERNAME","$FTP_PASSWORD" -e "set ftp:ssl-allow no; set net:max-retries 1; pwd; bye" "$server" 2>/dev/null; then
              echo "‚úÖ Alternative server $server works!"
              echo "ALTERNATIVE_SERVER=$server" >> $GITHUB_ENV
              break
            else
              echo "‚ùå Server $server failed"
            fi
          done

          # Set connection status for next steps
          echo "CONNECTION_OK=debug" >> $GITHUB_ENV
          echo "PROTOCOL=ftp" >> $GITHUB_ENV

      - name: Setup Node.js
        if: env.CONNECTION_OK == 'debug'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        if: env.CONNECTION_OK == 'debug'
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Configure pnpm for deployment
        if: env.CONNECTION_OK == 'debug'
        working-directory: frontend
        run: |
          pnpm config set registry https://registry.npmjs.org/
          pnpm config set fetch-retries 5
          pnpm config set fetch-retry-factor 2
          pnpm config set fetch-retry-mintimeout 10000
          pnpm config set fetch-retry-maxtimeout 60000

      - name: Install dependencies
        if: env.CONNECTION_OK == 'debug'
        working-directory: frontend
        run: pnpm install --no-frozen-lockfile --prefer-offline
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Build project
        if: env.CONNECTION_OK == 'debug'
        working-directory: frontend
        run: pnpm build

      - name: List build output
        if: env.CONNECTION_OK == 'debug'
        run: |
          echo "Build output files:"
          find frontend/dist -type f -print | head -20 | sed 's/^/  üìÑ /'
          echo "Total files to deploy: $(find frontend/dist -type f | wc -l)"

      - name: Deploy to Hostinger using lftp (Simple)
        if: env.CONNECTION_OK == 'debug'
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          echo "=== SIMPLE LFTP DEPLOY ==="

          # Clean and upload
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" -e "
            set ftp:ssl-allow no;
            set net:max-retries 3;
            cd public_html;
            lcd frontend/dist;
            mirror --reverse --delete --verbose;
            ls -la;
            bye
          " "$FTP_SERVER"

          echo "‚úÖ Simple deploy completed"

      - name: Verify files were uploaded
        if: env.CONNECTION_OK == 'debug'
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          echo "=== VERIFYING UPLOAD ==="
          # Install lftp
          sudo apt-get install -y lftp

          # List files in public_html
          echo "Files in public_html after upload:"
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" -e "set ftp:ssl-allow no; cd public_html; ls -la; bye" "$FTP_SERVER" || true

          echo "=== CHECKING INDEX FILE ==="
          # Check if index.html exists
          if lftp -u "$FTP_USERNAME","$FTP_PASSWORD" -e "set ftp:ssl-allow no; cd public_html; ls index.html; bye" "$FTP_SERVER" | grep -q "index.html"; then
            echo "‚úÖ index.html found in public_html"
          else
            echo "‚ùå index.html NOT found in public_html"
          fi

          echo "=== TESTING WEBSITE ==="
          # Test if website responds
          if curl -s --connect-timeout 10 "http://reformix.site" | grep -i "html\|<!doctype" >/dev/null; then
            echo "‚úÖ Website responds with HTML content"
          else
            echo "‚ùå Website not responding or no HTML content"
            echo "Response:"
            curl -s --connect-timeout 10 "http://reformix.site" | head -5 || echo "No response"
          fi
