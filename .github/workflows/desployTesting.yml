name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: homeservice_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      - name: Run backend tests
        env:
          NODE_ENV: test
          DB_URL: mysql://root:root@localhost:3306/homeservice_test
          OPENAI_API_KEY: test-dummy-key
        run: pnpm run test:backend

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Install workspace deps
        run: pnpm install --no-frozen-lockfile --recursive
      - name: Run frontend tests
        run: pnpm --filter frontend test:run

  # Deploy Backend (only after tests pass and on main branch)
  deploy-backend:
    name: Deploy Backend to Fly.io
    needs: [backend-tests, frontend-tests] # Wait for tests to pass
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install deps (prod + build)
        run: pnpm install --no-frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Install Fly CLI
        run: |
          curl -L https://fly.io/install.sh | sh
          echo "${HOME}/.fly/bin" >> $GITHUB_PATH

      - name: Deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          export FLYCTL_INSTALL="$HOME/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          if ! command -v flyctl >/dev/null; then echo "Fly CLI no instalado"; exit 1; fi
          sed -i "s/REEMPLAZA_CON_NOMBRE_APP_FLY/${{ secrets.FLY_APP_NAME }}/" fly.toml
          flyctl deploy --config fly.toml --remote-only --strategy immediate

      - name: Post URL
        if: always()
        run: |
          echo "App: ${{ secrets.FLY_APP_NAME }}"
          echo "https://${{ secrets.FLY_APP_NAME }}.fly.dev" || true

  # Deploy Frontend (after backend is deployed)
  deploy-frontend:
    name: Deploy Frontend
    needs: [deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Diagnostic FTP login (fail fast)
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          set -e
          RAW_SERVER="$FTP_SERVER"
          CLEAN_SERVER="${RAW_SERVER#ftp://}"
          echo "Testing FTP connection..."
          sudo apt-get update -qq && sudo apt-get install -y --no-install-recommends lftp >/dev/null

          if lftp -u "$FTP_USERNAME","$FTP_PASSWORD" -e "set ftp:ssl-allow no; set net:max-retries 1; pwd; bye" "$CLEAN_SERVER"; then
            echo "PROTOCOL=ftp" >> $GITHUB_ENV
          elif lftp -u "$FTP_USERNAME","$FTP_PASSWORD" -e "set ftp:ssl-force yes; set ftp:ssl-protect-data yes; set net:max-retries 1; pwd; bye" "$CLEAN_SERVER"; then
            echo "PROTOCOL=ftps" >> $GITHUB_ENV
          else
            echo "ERROR: FTP connection failed"
            exit 1
          fi

      - name: Detectar carpeta destino remota
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          CLEAN_SERVER="${FTP_SERVER#ftp://}"
          LIST=$(lftp -u "$FTP_USERNAME","$FTP_PASSWORD" -e "set ftp:ssl-allow no; cls -1; bye" "$CLEAN_SERVER" 2>/dev/null || true)
          if echo "$LIST" | grep -qx public_html; then
            echo "SERVER_DIR=public_html/" >> $GITHUB_ENV
          else
            echo "SERVER_DIR=./" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install and build frontend
        working-directory: frontend
        env:
          VITE_API_URL: https://${{ secrets.FLY_APP_NAME }}.fly.dev
        run: |
          pnpm config set registry https://registry.npmjs.org/
          pnpm install --no-frozen-lockfile --prefer-offline
          pnpm build

      - name: Deploy via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ${{ env.PROTOCOL }}
          local-dir: frontend/dist/
          server-dir: ${{ env.SERVER_DIR }}
          exclude: |
            **/.git*
            **/node_modules/**
            **/*.map
            **/story*/**
          dangerous-clean-slate: false

  # E2E Tests AFTER deployment
  e2e-tests:
    name: Production E2E Tests
    needs: [deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install
      - name: Install Playwright Browsers
        run: pnpm exec playwright install chromium firefox webkit --with-deps

      - name: Wait for production deployment
        run: |
          timeout 300 bash -c 'until curl -f https://${{ secrets.FRONTEND_URL }} 2>/dev/null; do sleep 10; done'
          timeout 300 bash -c 'until curl -f https://${{ secrets.FLY_APP_NAME }}.fly.dev/health 2>/dev/null; do sleep 10; done'

      - name: Run Production E2E tests
        env:
          PLAYWRIGHT_BASE_URL: https://${{ secrets.FRONTEND_URL }}
          API_BASE_URL: https://${{ secrets.FLY_APP_NAME }}.fly.dev
        run: pnpm run test:e2e

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-production
          path: playwright-report/
          retention-days: 30
